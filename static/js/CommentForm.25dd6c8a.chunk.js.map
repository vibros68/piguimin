{"version":3,"sources":["components/CommentForm/CommentForm.module.css","components/FormikPersist.jsx","components/CommentForm/validation.js","components/CommentForm/CommentForm.jsx"],"names":["module","exports","saveData","debounce","key","data","window","sessionStorage","setItem","JSON","stringify","Persist","name","values","setValues","useEffect","getItem","parse","getData","FormikPersist","formikProps","commentValidationSchema","namesupportedchars","namelengthmax","namelengthmin","isAuthorUpdate","Yup","shape","comment","trim","required","title","nullable","min","max","matches","yupFieldMatcher","undefined","i","forbiddenCommentsMdElements","React","memo","onSubmit","onCancel","onCommentSubmitted","disableSubmit","persistKey","className","hasAuthorUpdates","isEditing","useModalContext","handleOpenModal","handleCloseModal","openLoginModal","useCallback","ModalLogin","onLoggedIn","onClose","usePolicy","policyPi","smallTablet","useMediaQuery","resetForm","setSubmitting","setFieldError","ModalConfirm","message","successTitle","successMessage","statusCode","initialValues","loading","validationSchema","handleBlur","handleSubmit","handleChange","isSubmitting","setFieldTouched","setFieldValue","errors","isValid","touched","global","kind","toString","noMargin","align","wrap","contentClassName","styles","updateTitleTooltip","titleTooltipWrapper","placement","content","type","size","placeholder","data-testid","tabIndex","value","onChange","e","error","MarkdownEditor","allowImgs","allowHeaders","v","onBlur","disallowedElements","justify","topMarginSize","onClick"],"mappings":"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","file":"static/js/CommentForm.25dd6c8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"updateTitleTooltip\":\"CommentForm_updateTitleTooltip__3mJM3\",\"titleTooltipWrapper\":\"CommentForm_titleTooltipWrapper__2xI64\"};","import React, { useEffect } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport { FormikConsumer } from \"formik\";\n\nconst DEBOUNCE_DELAY = 300;\n\nconst saveData = debounce((key, data) => {\n  window.sessionStorage.setItem(key, JSON.stringify(data));\n}, DEBOUNCE_DELAY);\n\nconst getData = (key) => {\n  const data = window.sessionStorage.getItem(key);\n  return data && JSON.parse(data);\n};\n\nconst Persist = ({ name, values, setValues }) => {\n  useEffect(() => {\n    const data = getData(name);\n    if (data) {\n      setValues(data);\n    }\n  }, [name, setValues]);\n\n  useEffect(() => {\n    saveData(name, values);\n  });\n\n  return null;\n};\n\nconst FormikPersist = ({ name }) => (\n  <FormikConsumer>\n    {(formikProps) => <Persist name={name} {...formikProps} />}\n  </FormikConsumer>\n);\n\nexport default FormikPersist;\n","import * as Yup from \"yup\";\nimport { yupFieldMatcher } from \"src/utils/validation\";\n\nconst commentValidationSchema = ({\n  namesupportedchars,\n  namelengthmax,\n  namelengthmin,\n  isAuthorUpdate\n}) =>\n  Yup.object().shape({\n    comment: Yup.string().trim().required(\"required\"),\n    title: isAuthorUpdate\n      ? Yup.string()\n          .nullable()\n          .required(\"required\")\n          .min(namelengthmin)\n          .max(namelengthmax)\n          .matches(...yupFieldMatcher(\"Title\", namesupportedchars))\n      : undefined\n  });\n\nexport default commentValidationSchema;\n","import React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Formik } from \"formik\";\nimport FormikPersist from \"src/components/FormikPersist\";\nimport {\n  H4,\n  Button,\n  Message,\n  BoxTextInput,\n  Tooltip,\n  Icon,\n  useMediaQuery,\n  Text\n} from \"pi-ui\";\nimport { Row } from \"../layout\";\nimport MarkdownEditor from \"src/components/MarkdownEditor\";\nimport validationSchema from \"./validation\";\nimport useModalContext from \"src/hooks/utils/useModalContext\";\nimport ModalLogin from \"src/components/ModalLogin\";\nimport { usePolicy } from \"src/hooks\";\nimport ModalConfirm from \"src/components/ModalConfirm\";\nimport styles from \"./CommentForm.module.css\";\n\nconst forbiddenCommentsMdElements = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"];\n\nconst CommentForm = ({\n  onSubmit,\n  onCancel,\n  onCommentSubmitted,\n  disableSubmit,\n  persistKey,\n  className,\n  isAuthorUpdate,\n  hasAuthorUpdates,\n  values\n}) => {\n  const isEditing = !!values;\n  const [handleOpenModal, handleCloseModal] = useModalContext();\n\n  const openLoginModal = useCallback(() => {\n    handleOpenModal(ModalLogin, {\n      onLoggedIn: handleCloseModal,\n      onClose: handleCloseModal,\n      title: \"Your session has expired. Please log in again\"\n    });\n  }, [handleOpenModal, handleCloseModal]);\n\n  const {\n    policyPi: { namesupportedchars, namelengthmax, namelengthmin }\n  } = usePolicy();\n  const smallTablet = useMediaQuery(\"(max-width: 685px)\");\n\n  async function handleSubmit(\n    { comment, title },\n    { resetForm, setSubmitting, setFieldError }\n  ) {\n    try {\n      if (title && hasAuthorUpdates) {\n        handleOpenModal(ModalConfirm, {\n          title: \"New author update\",\n          message:\n            \"Submitting a new update will lock the previous update thread. Are you sure you want to continue?\",\n          successTitle: \"Author Update posted\",\n          successMessage: <Text>The update has been successfully posted!</Text>,\n          onClose: () => {\n            setSubmitting(false);\n            handleCloseModal();\n          },\n          onSubmit: async () => {\n            await onSubmit({ comment: comment.trim(), title });\n            setSubmitting(false);\n            resetForm();\n            onCommentSubmitted && onCommentSubmitted();\n          }\n        });\n      } else {\n        await onSubmit({ comment: comment.trim(), title });\n        setSubmitting(false);\n        resetForm();\n        onCommentSubmitted && onCommentSubmitted();\n      }\n    } catch (e) {\n      setSubmitting(false);\n      // Hardcode the login modal to show up when user session expires\n      // ref: https://github.com/decred/politeiagui/pull/2541#issuecomment-909194251\n      if (e.statusCode === 403) {\n        openLoginModal();\n      } else {\n        setFieldError(\"global\", e);\n      }\n    }\n  }\n\n  const initialValues = {\n    title: values?.title !== \"\" ? values?.title : isAuthorUpdate ? \"\" : null,\n    comment: values?.comment || \"\"\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      loading={!validationSchema}\n      validationSchema={validationSchema({\n        namesupportedchars,\n        namelengthmax,\n        namelengthmin,\n        isAuthorUpdate\n      })}\n      onSubmit={handleSubmit}\n    >\n      {({\n        values,\n        handleBlur,\n        handleSubmit,\n        handleChange,\n        isSubmitting,\n        setFieldTouched,\n        setFieldValue,\n        errors,\n        isValid,\n        touched\n      }) => {\n        const handleTitleChangeWithTouched = (e) => {\n          setFieldTouched(\"title\", true);\n          handleChange(e);\n        };\n\n        const handleCommentChange = (v) => setFieldValue(\"comment\", v);\n\n        return (\n          <form onSubmit={handleSubmit} className={className}>\n            {errors && errors.global && (\n              <Message className=\"margin-bottom-m\" kind=\"error\">\n                {errors.global.toString()}\n              </Message>\n            )}\n            {isAuthorUpdate && (\n              <>\n                <Row noMargin align=\"center\" wrap={smallTablet}>\n                  <H4 className=\"margin-bottom-s\">Proposal Update</H4>\n                  <Tooltip\n                    contentClassName={styles.updateTitleTooltip}\n                    className={styles.titleTooltipWrapper}\n                    placement=\"right\"\n                    content=\"The proposal author is allowed to give periodic updates on the status of their proposal.  You can start an update thread by submitting a new comment.  Users\nwill only be able to reply to your most recent update thread.\"\n                  >\n                    <div>\n                      <Icon type=\"info\" size={smallTablet ? \"md\" : \"lg\"} />\n                    </div>\n                  </Tooltip>\n                </Row>\n                <BoxTextInput\n                  placeholder=\"Update title\"\n                  name=\"title\"\n                  data-testid=\"update-title\"\n                  tabIndex={1}\n                  value={values.title}\n                  onChange={handleTitleChangeWithTouched}\n                  error={touched.title && errors.title}\n                />\n              </>\n            )}\n            <MarkdownEditor\n              allowImgs={false}\n              allowHeaders={false}\n              name=\"comment\"\n              className=\"margin-top-s\"\n              value={values.comment}\n              onChange={handleCommentChange}\n              onBlur={handleBlur}\n              disallowedElements={forbiddenCommentsMdElements}\n              placeholder=\"Write a comment\"\n            />\n            <Row justify=\"right\" topMarginSize=\"s\">\n              {!!onCancel && (\n                <Button type=\"button\" kind=\"secondary\" onClick={onCancel}>\n                  Cancel\n                </Button>\n              )}\n              <Button\n                type=\"submit\"\n                data-testid=\"comment-submit-button\"\n                kind={!isValid || disableSubmit ? \"disabled\" : \"primary\"}\n                loading={isSubmitting}\n              >\n                {isEditing ? \"Edit \" : \"Add \"} comment\n              </Button>\n            </Row>\n            {!!persistKey && <FormikPersist name={persistKey} />}\n          </form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nCommentForm.propTypes = {\n  values: PropTypes.object,\n  className: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func,\n  onCommentSubmitted: PropTypes.func,\n  disableSubmit: PropTypes.bool,\n  persistKey: PropTypes.string\n};\n\nexport default React.memo(CommentForm);\n"],"sourceRoot":""}